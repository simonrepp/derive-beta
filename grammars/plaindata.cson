scopeName: 'source.plain'
name: 'Plain Data'
fileTypes: [
  'plain'
]
patterns: [
  {
    # Multiline value
    'begin': '^(-{3,})\\s*(.+?)\\s*$'
    'beginCaptures':
      '1': 'name': 'constant.character.entity.plain'
      '2': 'name': 'constant.character.entity.plain'
    'end': '^(-{3,})\\s*(.+?)\\s*$'
    'endCaptures':
      '1': 'name': 'constant.character.entity.plain'
      '2': 'name': 'constant.character.entity.plain'
    'patterns': [
      { 'include': 'text.md' }
      { 'include': 'source.gfm' }
    ]
  }
  {
    # Comment
    'match': '^\\s*(>)\\s*(.+?)?\\s*$'
    'captures':
      '1': 'name': 'TODO.operator.comment.plain'
      '2': 'name': 'punctuation.definition.comment.plain'
  }
  {
    # Alternative key
    'match': '^\\s*(--)(?!-)\\s*(\\S.*?)\\s*$'
    'captures':
      '1': 'name': 'constant.character.entity.plain'
      '2': 'name': 'punctuation.definition.variable.plain'
  }
  {
    # Value
    'match': '^\\s*(-)(?!-)\\s*(.+?)?\\s*$'
    'captures':
      '1': 'name': 'punctuation.definition.variable.plain'
      '2': 'name': 'string.plain'
  }
  {
    # Subsection 1st level
    'match': '^\\s*(#)(?!#)\\s*(\\S.*?)\\s*$'
    'captures':
      '1': 'name': 'entity.name.type.instance.plain'
      '2': 'name': 'entity.name.type.instance.plain'
  }
  {
    # Subsection 2nd level
    'match': '^\\s*(##)(?!#)\\s*(\\S.*?)\\s*$'
    'captures':
      '1': 'name': 'support.function.plain'
      '2': 'name': 'support.function.plain'
  }
  {
    # Subsection 3rd to 5th level
    'match': '^\\s*(#{3,5})(?!#)\\s*(\\S.*?)\\s*$'
    'captures':
      '1': 'name': 'constant.character.entity.plain'
      '2': 'name': 'constant.character.entity.plain'
  }
  {
    # Key value pair
    'match': '^\\s*([^:]+?)\\s*(:)\\s*(\\S.*?)\\s*$'
    'captures':
      '1': 'name': 'punctuation.definition.variable.plain'
      '2': 'name': 'keyword.operator.assignment.plain'
      '3': 'name': 'string.plain'
  }
  {
    # Key
    'match': '^\\s*([^:]+?)\\s*(:)\\s*$'
    'captures':
      '1': 'name': 'punctuation.definition.variable.plain'
      '2': 'name': 'keyword.operator.assignment.plain'
  }
  {
    # Invalid (TODO: find a generic error syntax highlighting or provide styles)
    'match': '^.*$'
    'name': 'invalid.entity.name.function.plain'
  }
]
